/**
 *  1496. Спамер
 *
 *    Ограничение времени: 1.0 секунды
 *    Ограничение памяти: 64 МБ
 *
 *  Среди наших знакомых есть известный спамер. В конце каждого контеста он
 *  сабмитит свои неправильные решения со скоростью пулемёта. Кроме того, он
 *  ещё и ведёт нечестную игру, всегда используя по несколько отладочных
 *  аккаунтов. Жюри наконец-то решило дисквалифицировать спамера. Для этого они
 *  сначала хотят определить все его отладочные аккаунты. Известно, какие
 *  команды сабмитили свои решения в последние 10 минут контеста. Ваша задача
 *  — найти все отладочные аккаунты спамера. Жюри считает аккаунтами спамера
 *  всех, кто сабмитил решения больше одного раза в последние 10 минут.
 *
 *  Исходные данные
 *  В первой строке записано число N — количество сабмитов в последние 10 минут
 *  (0 ≤ N ≤ 100). Следующие N строк содержат названия команд, сабмитивших
 *  решения. Названия состоят только из строчных латинских букв и цифр. Длина
 *  названий не превосходит 30 символов.
 *
 *  Результат
 *  Выведите все аккаунты, под которыми, по мнению жюри, играет спамер.
 *  Порядок вывода не важен.
 *
 *  Пример
 *    исходные данные     |   результат
 *  ----------------------+-----------------------------------
 *    11                  |   x
 *    naucoder            |   abikbaev
 *    iceman              |
 *    abikbaev            |
 *    abikbaev            |
 *    petr                |
 *    abikbaev            |
 *    abikbaev            |
 *    x                   |
 *    abikbaev            |
 *    acrush              |
 *    x                   |
 *
 *
 */

#include <iostream>
#include <string>
#include <map>

int main() {
  std::size_t count_submits;
  std::cin >> count_submits;

  std::map<std::string, size_t> dict;
  for (std::size_t i = 0; i != count_submits; ++i) {
    std::string account;
    std::cin >> account;
    auto it = dict.find(account);
    if (it == dict.end())
      dict[account] = 1;
    else
      it->second += 1;
  }

  for (auto& account : dict) {
    if (account.second > 1)
      std::cout << account.first << std::endl;
  }
}
